import pymorphy2
import json
import nltk
from math import e
from scipy.special import expit
import random

morph = pymorphy2.MorphAnalyzer()

layer_0_weights = [[-0.5, -0.2, 0.3, -0.1, 0.4, -0.2, 0.3, -0.3, -0.3, 0.2, -0.5, -0.2, -0.2, -0.1, 0.0, -0.4, -0.5, 0.3, -0.4, 0.1, 0.4, -0.1, -0.4, -0.1, 0.5, -0.1, -0.0, -0.1, -0.3, 0.3],
[0.0, -0.4, -0.2, 0.4, -0.1, 0.2, 0.3, -0.5, 0.0, 0.3, 0.3, -0.5, -0.5, -0.0, -0.0, -0.1, 0.2, -0.2, -0.0, 0.4, 0.1, 0.5, 0.2, 0.2, 0.0, -0.2, 0.2, -0.1, -0.3, -0.5],
[0.4, -0.3, -0.3, -0.1, -0.1, -0.3, -0.0, 0.5, 0.2, 0.2, 0.1, -0.1, -0.2, -0.3, 0.5, 0.2, -0.1, 0.0, 0.2, 0.5, -0.4, 0.2, -0.4, -0.3, 0.1, -0.1, 0.1, 0.1, 0.4, -0.4],
[-0.4, 0.3, -0.2, 0.2, 0.4, -0.2, -0.1, 0.1, 0.0, 0.0, -0.2, 0.1, 0.4, -0.5, -0.3, -0.5, -0.1, 0.2, -0.3, 0.2, -0.2, -0.2, 0.5, 0.1, -0.0, -0.4, 0.3, 0.1, 0.1, -0.3],
[-0.5, 0.3, 0.5, -0.4, -0.3, 0.4, -0.4, 0.1, -0.0, 0.4, -0.3, -0.0, 0.1, -0.4, -0.3, -0.5, 0.4, -0.2, -0.5, -0.2, 0.4, -0.3, -0.1, -0.4, -0.3, 0.3, 0.1, -0.4, -0.1, 0.1],
[-0.3, 0.5, 0.4, 0.4, 0.3, 0.3, -0.1, -0.1, -0.3, -0.2, 0.4, -0.1, -0.2, -0.2, -0.3, 0.3, -0.1, -0.0, 0.3, 0.4, -0.1, 0.3, -0.1, -0.2, 0.4, -0.3, 0.0, -0.3, -0.2, -0.4],
[0.1, 0.2, 0.4, -0.2, 0.1, 0.1, -0.2, 0.0, -0.2, -0.2, -0.3, -0.3, 0.5, 0.0, -0.1, -0.0, 0.0, 0.0, 0.4, -0.2, -0.1, 0.5, -0.4, 0.2, -0.5, 0.5, -0.1, 0.1, -0.0, 0.5],
[0.1, 0.4, -0.1, 0.0, -0.2, 0.0, 0.5, -0.3, 0.3, -0.1, 0.0, 0.1, -0.3, 0.1, -0.4, 0.1, 0.3, -0.1, 0.0, -0.0, 0.1, 0.2, -0.4, 0.3, 0.1, 0.1, -0.0, 0.4, -0.5, -0.1],
[0.5, 0.1, 0.4, -0.1, 0.1, 0.0, 0.4, -0.1, -0.2, 0.1, 0.2, -0.1, 0.4, 0.3, -0.2, 0.4, 0.2, 0.4, 0.4, -0.4, -0.1, -0.2, 0.4, -0.4, 0.0, -0.1, -0.2, 0.2, 0.3, -0.0],
[0.2, -0.2, -0.4, 0.3, 0.4, 0.1, -0.1, -0.3, 0.5, -0.5, 0.1, 0.3, 0.4, -0.0, 0.1, -0.5, 0.2, -0.0, 0.1, 0.1, -0.3, 0.4, -0.0, 0.3, 0.3, -0.4, -0.1, -0.0, 0.3, -0.4],
[0.1, 0.0, 0.0, 0.1, -0.1, 0.1, -0.4, -0.1, 0.1, -0.3, 0.2, -0.0, -0.3, 0.0, 0.0, -0.3, 0.2, 0.2, -0.2, -0.4, -0.4, -0.3, -0.3, -0.0, -0.5, 0.2, -0.0, 0.3, 0.4, 0.1],
[-0.3, -0.5, 0.2, -0.0, -0.4, 0.0, 0.5, -0.5, -0.1, 0.2, -0.5, 0.2, -0.3, -0.0, 0.4, 0.5, 0.2, -0.3, 0.4, 0.2, 0.5, 0.2, 0.2, 0.5, -0.5, -0.0, -0.3, 0.4, -0.3, -0.4],
[0.0, -0.4, 0.4, -0.4, -0.2, 0.1, 0.3, -0.0, 0.4, -0.4, 0.4, -0.5, 0.1, 0.3, 0.1, -0.4, 0.1, -0.0, 0.1, -0.3, -0.1, 0.4, 0.2, -0.4, -0.1, -0.4, 0.1, 0.1, 0.2, -0.2],
[0.4, -0.4, 0.0, 0.5, -0.5, -0.4, 0.4, -0.2, -0.3, -0.4, 0.3, -0.1, 0.4, 0.0, 0.1, 0.3, -0.4, 0.1, -0.5, 0.3, 0.3, -0.5, -0.5, 0.4, 0.2, 0.4, -0.2, -0.5, -0.3, 0.4],
[0.5, -0.4, 0.4, 0.5, -0.2, 0.1, -0.2, -0.3, 0.3, 0.3, 0.1, -0.0, 0.2, 0.0, 0.2, -0.1, 0.0, 0.1, -0.5, -0.1, -0.2, 0.4, 0.4, 0.3, -0.4, -0.2, -0.4, 0.0, 0.1, -0.2],
[0.4, 0.4, 0.5, -0.5, 0.0, 0.0, -0.0, 0.3, -0.4, 0.0, -0.1, -0.4, 0.1, -0.4, 0.3, 0.2, -0.4, 0.3, 0.4, -0.3, -0.5, -0.0, 0.2, -0.5, -0.3, 0.5, -0.0, 0.0, -0.2, 0.1],
[0.4, 0.3, -0.2, 0.0, 0.1, 0.5, -0.2, 0.0, -0.4, 0.5, -0.2, 0.3, -0.1, 0.4, -0.4, -0.2, -0.4, -0.2, 0.1, 0.2, 0.2, 0.4, 0.1, 0.4, 0.4, -0.3, -0.5, 0.5, 0.2, -0.0],
[-0.1, 0.4, -0.1, 0.5, -0.1, 0.3, -0.1, -0.3, 0.5, 0.1, -0.0, 0.4, -0.3, 0.5, 0.1, -0.4, 0.3, 0.1, -0.1, -0.4, 0.4, 0.2, -0.4, 0.3, -0.4, -0.4, 0.1, -0.4, 0.4, 0.2],
[0.1, 0.2, -0.5, 0.3, 0.1, 0.4, 0.5, -0.2, -0.0, -0.2, -0.2, 0.3, 0.3, -0.1, 0.4, 0.4, 0.1, -0.0, 0.4, 0.2, 0.2, 0.2, -0.3, -0.4, -0.3, -0.4, -0.1, 0.3, 0.0, -0.2],
[-0.1, 0.2, -0.0, -0.2, 0.5, 0.2, -0.1, -0.0, 0.3, -0.2, 0.3, -0.3, 0.0, 0.2, -0.2, -0.1, -0.4, 0.3, -0.3, -0.3, 0.4, -0.1, 0.5, 0.3, -0.3, 0.1, -0.3, 0.1, 0.1, 0.3]]
layer_1_offsets = [0.11, 0.16, -0.0, -0.16, -0.16, 0.01, -0.08, -0.0, 0.14, 0.11, 0.17, 0.06, -0.16, -0.03, -0.07, -0.17, 0.04, 0.07, 0.03, 0.13, 0.1, 0.2, 0.0, -0.11, -0.16, -0.07, 0.11, 0.0, -0.14, 0.09]
layer_1_weights = [[0.05, -0.14, 0.06, -0.09, 0.03, -0.19, -0.1, -0.13, -0.13, -0.14, -0.03, -0.18, -0.17, 0.17, 0.09, -0.14, 0.06, 0.06, -0.16, 0.12, -0.04, 0.09, -0.05, 0.12, -0.12, -0.03, 0.16, 0.0, -0.1, -0.13],
[-0.2, -0.03, -0.13, -0.18, 0.04, -0.11, 0.1, -0.17, -0.18, -0.1, 0.07, -0.04, -0.04, 0.07, -0.15, -0.19, 0.16, -0.14, -0.15, 0.19, 0.14, 0.01, -0.07, -0.04, -0.07, 0.01, 0.09, 0.1, -0.05, 0.18],
[-0.12, 0.06, 0.17, 0.18, -0.06, -0.13, -0.19, -0.1, 0.12, -0.09, 0.0, 0.05, -0.09, -0.05, 0.19, 0.11, -0.09, -0.01, 0.19, -0.01, -0.08, -0.03, -0.15, -0.11, 0.13, -0.07, -0.11, 0.16, 0.13, 0.17],
[0.1, 0.05, 0.14, 0.16, 0.01, -0.05, -0.11, 0.14, -0.1, -0.09, -0.02, -0.16, 0.14, 0.16, -0.16, -0.08, -0.04, -0.06, -0.13, -0.05, -0.14, 0.18, 0.0, 0.09, -0.01, -0.04, -0.18, 0.08, 0.08, -0.0],
[0.14, 0.11, -0.06, -0.07, -0.06, 0.04, 0.08, 0.17, -0.08, 0.17, -0.17, -0.02, 0.17, 0.02, 0.11, -0.03, 0.03, 0.15, 0.11, -0.01, 0.06, 0.03, -0.01, -0.1, 0.16, 0.15, 0.18, -0.13, -0.04, 0.04],
[-0.14, 0.1, 0.05, 0.18, -0.04, 0.12, 0.1, -0.1, 0.11, 0.14, -0.09, 0.04, 0.09, 0.02, 0.14, 0.04, -0.06, 0.1, -0.04, 0.01, -0.16, 0.17, -0.11, 0.12, -0.0, -0.01, -0.18, 0.02, -0.09, -0.19],
[-0.02, -0.13, 0.15, -0.2, -0.19, -0.09, 0.02, -0.01, -0.03, -0.06, -0.18, 0.13, 0.17, -0.13, 0.18, 0.03, 0.03, 0.18, 0.07, 0.02, 0.19, -0.01, -0.12, -0.16, 0.13, 0.01, -0.15, 0.0, 0.2, -0.15],
[-0.19, -0.0, 0.12, -0.07, -0.19, 0.08, 0.0, 0.11, -0.12, 0.09, 0.14, 0.16, -0.03, -0.07, 0.01, 0.05, -0.13, 0.1, 0.1, -0.05, 0.13, -0.13, 0.12, 0.17, 0.07, -0.06, 0.06, 0.06, 0.11, 0.19],
[-0.09, 0.09, 0.01, -0.1, 0.03, -0.14, 0.1, 0.02, -0.09, -0.13, 0.01, -0.08, 0.03, -0.01, -0.13, -0.19, -0.19, -0.05, 0.08, -0.14, -0.14, 0.04, -0.18, 0.08, 0.13, -0.19, -0.01, -0.08, -0.07, -0.17],
[-0.14, 0.16, 0.03, -0.14, -0.12, -0.12, -0.17, -0.06, -0.03, -0.15, -0.02, 0.11, -0.06, 0.18, -0.07, -0.1, -0.06, 0.01, -0.08, 0.07, 0.17, -0.15, -0.03, -0.08, 0.14, -0.09, -0.13, 0.01, -0.07, 0.19],
[0.14, 0.08, 0.09, 0.08, -0.2, 0.2, -0.06, 0.07, 0.03, -0.17, 0.0, -0.01, 0.08, -0.01, -0.1, -0.05, -0.18, 0.12, -0.2, -0.11, -0.07, 0.08, -0.16, 0.16, 0.14, -0.0, -0.06, -0.13, -0.1, -0.1],
[-0.17, -0.12, -0.18, 0.18, 0.09, -0.01, -0.07, -0.05, 0.13, 0.13, 0.12, 0.14, -0.12, -0.09, -0.15, 0.19, 0.01, -0.15, -0.04, 0.04, -0.15, 0.13, 0.04, 0.03, -0.04, 0.15, -0.03, 0.14, 0.03, 0.12],
[0.07, 0.1, -0.0, -0.07, -0.11, 0.03, 0.09, 0.07, -0.05, -0.09, -0.05, 0.04, 0.2, -0.07, 0.06, 0.06, 0.15, 0.14, -0.1, -0.01, -0.0, -0.18, 0.2, 0.14, -0.01, -0.04, 0.16, -0.02, 0.03, -0.01],
[-0.02, -0.09, 0.11, -0.01, -0.02, 0.18, 0.18, -0.19, 0.19, 0.12, 0.14, -0.01, -0.07, -0.01, -0.06, -0.12, -0.02, 0.09, 0.19, -0.15, 0.11, 0.03, 0.07, 0.14, -0.17, -0.03, 0.09, 0.09, 0.2, 0.01],
[0.17, 0.13, 0.15, 0.06, 0.19, 0.04, 0.04, -0.17, 0.13, -0.05, -0.04, 0.15, 0.16, 0.2, -0.15, -0.02, -0.2, 0.05, 0.19, 0.16, -0.1, 0.11, -0.07, 0.1, -0.01, 0.18, -0.1, -0.14, 0.01, 0.19],
[0.08, -0.04, -0.13, -0.14, 0.01, -0.09, -0.04, -0.04, -0.19, -0.1, -0.13, -0.09, -0.12, 0.17, 0.03, -0.02, -0.06, 0.14, -0.07, -0.06, -0.13, -0.05, -0.07, -0.11, 0.15, 0.17, -0.15, 0.18, 0.02, 0.02],
[-0.03, 0.06, -0.04, -0.07, -0.06, 0.16, -0.03, 0.14, -0.08, -0.08, -0.13, 0.17, 0.13, 0.07, -0.14, 0.16, 0.08, 0.15, -0.18, -0.12, -0.18, -0.01, 0.17, -0.01, 0.02, 0.07, -0.15, 0.16, -0.01, -0.17],
[-0.19, -0.03, 0.08, 0.06, 0.06, 0.0, 0.03, 0.14, -0.15, -0.14, -0.12, -0.1, -0.05, 0.03, -0.09, 0.09, -0.13, -0.0, 0.1, 0.03, 0.07, -0.1, 0.04, -0.15, -0.0, -0.12, -0.14, -0.06, 0.05, 0.09],
[0.09, -0.02, -0.17, -0.01, 0.14, -0.06, 0.05, -0.04, -0.16, 0.04, -0.11, -0.09, -0.11, 0.04, 0.1, -0.02, -0.16, -0.02, -0.1, 0.19, -0.16, 0.1, -0.01, -0.08, -0.05, 0.17, 0.01, -0.11, -0.11, -0.17],
[0.16, 0.12, -0.02, -0.14, 0.01, -0.12, 0.18, 0.11, 0.06, 0.01, 0.04, 0.08, -0.11, 0.16, -0.1, 0.12, -0.18, 0.08, -0.04, 0.12, 0.15, 0.16, -0.03, 0.13, -0.09, 0.11, 0.06, -0.17, -0.05, -0.13]]
layer_1_values = []
layer_2_offsets = []
layer_2_values = []

final_data = {}

#получение оценки предложения из json файла
def get_choice(data):
    return data['annotations'][0]['result'][0]['value']['choices'][0]

#получение предложения из json файла
def get_text(data):
    return data['data']['text']

#обновление статистики конкретного слова
def update_stats(result, stats):
    if result == 'Positive':
        new_stats = (stats[0] + 1, stats[1], stats[2])
    elif result == 'Negative':
        new_stats = (stats[0], stats[1] - 1, stats[2])
    elif result == 'Neutral':
        new_stats = (stats[0], stats[1], stats[2] + 1)

    pos, neg, neu = new_stats

    try:
        mark = expit((pos + neg) * (1 - neu/(pos + abs(neg) + neu))) - 0.5
    except ZeroDivisionError:
        mark = 0

    return round(mark, 2), new_stats

#функция прямого распространения (forward propagation)
def layer_processing(current_layer_values, current_layer_weights, next_layer_offsets, count_of_next_layer_neurons):
    next_layer_values = []
    for j in range(len(count_of_next_layer_neurons)):
        sum = 0
        for i in range(len(current_layer_values)):
            sum += current_layer_values[i] * current_layer_weights[i][j]
        sum = expit(sum + next_layer_offsets[j])
        next_layer_values.append(sum)
    return next_layer_values

#функция подготовки слов (выставление им оценки)
def pre_layer_preparing():
    with open("data.json", "r", encoding="UTF-8") as data:
        data = json.load(data)

        for row in data:
            try:
                #получение строки из json файла и разбитие ее на слова
                stringg = ((get_text(row) if get_text(row)[-1] not in ".?!"
                            else get_text(row)[:-1]).replace(',', '')).replace('.', '')

                splitted_string = [word.lower()
                                   for word in list(set(nltk.tokenize.word_tokenize(stringg, 'russian')))]

                result = get_choice(row)

                #алгоритм оценки слов
                for pre_word in splitted_string:
                    morphed_word = morph.parse(pre_word)[0].normal_form

                    if morphed_word in final_data:
                        _, stats = final_data[morphed_word]
                        final_data[morphed_word] = (update_stats(result, stats))
                    else:
                        stats = (0, 0, 0)
                        final_data[morphed_word] = (update_stats(result, stats))

            except IndexError:
                pass


def main():
    pass


if __name__ == '__main__':
    pre_layer_preparing()
    

#вывод всех слов
with open('new_data.txt', 'a', encoding='UTF-8') as f:
    for data in final_data:
        if final_data[data][1][0] + abs(final_data[data][1][1]) + final_data[data][1][2] > 4:
            f.write(f'{data} --> {final_data[data]}\n')
